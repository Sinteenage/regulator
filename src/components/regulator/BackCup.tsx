/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import { useGLTF, useTexture } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';
import { OperationsNames } from '../../types';
import { useRef } from 'react';
import { Group } from 'three';

type GLTFResult = GLTF & {
  nodes: {
    Cylinder16_1: THREE.Mesh;
    Cylinder16_2: THREE.Mesh;
    Cylinder16_3: THREE.Mesh;
  };
  materials: {
    ['_9_-_Default']: THREE.MeshStandardMaterial;
    Metal_Grey_Plain: THREE.MeshStandardMaterial;
    Metal_Latun_Plain: THREE.MeshStandardMaterial;
  };
};

interface regProps {
    operationId: string;
    onActive: (active: boolean) => void;
    props?: JSX.IntrinsicElements['group']
}

export const BackCup: React.FC<regProps> = ({operationId, onActive, props}) => {
    const modelRef = useRef<Group>(null!);
    
    const { nodes, materials } = useGLTF('/assets/models/backCup.gltf') as GLTFResult;

    const [ blueTexture ] = useTexture([
        '/assets/textures/blue.jpg',
    ]);

    materials.Metal_Latun_Plain.roughness = 0.2;
    materials.Metal_Latun_Plain.metalness = 0.8;

    materials.Metal_Grey_Plain.roughness = 0.2;
    materials.Metal_Grey_Plain.metalness = 0.8;

    useFrame(() => {
        if(operationId === OperationsNames.OPR_5 && modelRef.current){
            if(modelRef.current.position.z >= -0.4){
                modelRef.current.position.z = modelRef.current.position.z - 0.05;
            } else {
                operationId = '';
                onActive(false);
            }
        }
        if(operationId === OperationsNames.OPR_9){
            if(modelRef.current.position.z <= -0.02){
                modelRef.current.position.z = modelRef.current.position.z + 0.05;
            }
        }
    });

    return (
        <group {...props} ref={modelRef} dispose={null}>
            <group rotation={[-Math.PI / 2, -Math.PI / 8, 0]} scale={0.025}>
                <mesh
                    castShadow
                    receiveShadow
                >
                    <primitive object={nodes.Cylinder16_1.geometry} />
                    <meshStandardMaterial map={blueTexture} roughness={0.25} metalness={0.4}/>
                </mesh>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Cylinder16_2.geometry}
                    material={materials.Metal_Grey_Plain}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Cylinder16_3.geometry}
                    material={materials.Metal_Latun_Plain}
                />
            </group>
        </group>
    );
};

useGLTF.preload('/assets/models/backCup.gltf');