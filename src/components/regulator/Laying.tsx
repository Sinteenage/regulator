/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { OperationsNames } from '../../types';
import { useFrame } from '@react-three/fiber';
import { Group } from 'three';
import { useRef } from 'react';

type GLTFResult = GLTF & {
  nodes: {
    Tube04: THREE.Mesh;
  };
  materials: {
    ['Metal_Grey_Plain.001']: THREE.MeshStandardMaterial;
  };
};

interface regProps {
  operationId: string;
  onActive: (active: boolean) => void;
  props?: JSX.IntrinsicElements['group']
}

export const Laying: React.FC<regProps> = ({operationId, onActive, props}) => {
    const modelRef = useRef<Group>(null!);

    const { nodes, materials } = useGLTF('/assets/models/laying.gltf') as GLTFResult;

    materials['Metal_Grey_Plain.001'].roughness = 0.2;
    materials['Metal_Grey_Plain.001'].metalness = 1;

    useFrame(() => {
        if(operationId === OperationsNames.OPR_6 && modelRef.current){
            if(modelRef.current.position.y <= 7){
                modelRef.current.position.y = modelRef.current.position.y + 0.1;
            } else if(modelRef.current.position.z >= -6){
                modelRef.current.position.z = modelRef.current.position.z - 0.1;
            } else {
                operationId = '';
                onActive(false);
            }
        }
    });

    return (
        <group {...props} ref={modelRef} dispose={null}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Tube04.geometry}
                material={materials['Metal_Grey_Plain.001']}
                rotation={[-1.57, -Math.PI / 4, 0]}
                scale={0.025}
            />
        </group>
    );
};

useGLTF.preload('/assets/models/laying.gltf');